---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-system
spec:
  description: "System postgres cluster"
  # imageName: ghcr.io/cloudnative-pg/postgresql:16.1
  instances: 1
  startDelay: 300
  stopDelay: 300
  primaryUpdateStrategy: unsupervised

  postgresql:
    parameters:
      # timezone: "Europe/Rome"
      shared_buffers: 256MB
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
      auto_explain.log_min_duration: "10s"
    pg_hba:
      - host all all 10.244.0.0/16 md5

  bootstrap:
    initdb:
      database: app
      owner: app # must match secret username
      secret:
        name: postgres-auth-key
    # Alternative bootstrap method: start from a backup
    #recovery:
    #  backup:
    #    name: backup-on-demand

  superuserSecret:
    name: postgres-su-key # must have postgres username

  storage:
    storageClass: longhorn
    size: 1Gi

  monitoring:
    enablePodMonitor: true

  # nodeSelector:
  # kubernetes.io/role: "worker"
  # serviceAccountTemplate: #
  #   metadata:
  #     annotations:
  #       iam.gke.io/gcp-service-account: cnpg@<project>.iam.gserviceaccount.com

  backup:
    barmanObjectStore:
      destinationPath: s3://cluster-cnpg/ # Bucket name
      endpointURL: ${BACKUP_URL}
      s3Credentials:
        accessKeyId:
          name: backup
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: backup
          key: ACCESS_SECRET_KEY
      wal:
        compression: gzip
        # encryption: AES256
      data:
        compression: gzip
        # encryption: AES256
        immediateCheckpoint: false
        jobs: 2
    retentionPolicy: "7d"

  resources:
    requests:
      memory: "512Mi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "2"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
