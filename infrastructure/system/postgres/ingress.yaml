apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: postgres-ingress
spec:
  entryPoints:
    - websecure
  routes:
    - match: HostSNI(`db.${DOMAIN}`)
      services:
        - name: postgres-system-rw
          port: 5432
  tls:
    passthrough: true
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: postgres-ingress
#   annotations:
#     external-dns.kubernetes.io/target: db.${DOMAIN}
#     traefik.ingress.kubernetes.io/router.entrypoints: websecure
#     # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
#     # traefik.ingress.kubernetes.io/router.tls.passthrough: "true"
#     # traefik.ingress.kubernetes.io/router.middlewares: auth-oauth@kubernetescrd
# spec:
#   ingressClassName: traefik
#   rules:
#     - host: db.${DOMAIN}
#       http:
#         paths:
#           - path: /
#             pathType: ImplementationSpecific
#             backend:
#               service:
#                 name: postgres-system-rw
#                 port:
#                   number: 5432
# tls:
#   - secretName: traefik-cert-prod
#     hosts:
#       - db.${DOMAIN}

# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: argocd-server
#   namespace: argocd
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - kind: Rule
#       match: Host(`argocd.example.com`)
#       priority: 10
#       services:
#         - name: argocd-server
#           port: 80
#     - kind: Rule
#       match: Host(`argocd.example.com`) && Headers(`Content-Type`, `application/grpc`)
#       priority: 11
#       services:
#         - name: argocd-server
#           port: 80
#           scheme: h2c
# tls:
#   - secretName: traefik-cert-prod
#     hosts:
#       - db.${DOMAIN}
